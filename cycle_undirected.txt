#include<bits/stdc++.h>
// to check if there's a closed cycle in graph using dfs
using namespace std;
bool arr[5];
vector<vector<int>>g;
void edge(int a,int b)
{
	g[a].push_back(b);
	g[b].push_back(a);
}
int dfs(int x,int parent)
{
int flag=0;
	arr[x]=true;
	for(int i=0;i<g[x].size();i++)
	{
		if(arr[g[x][i]]==false)
			{dfs(g[x][i],x);}
		else if(arr[g[x][i]]==true&&g[x][i]!=parent)
			{flag=1;}
	}
return(flag);
}
int main()
{
	for(int i=0;i<5;i++)
		arr[i]=false;
	g.assign(6,vector<int>());
	edge(0,1);
	edge(3,1);
	edge(0,3);
	edge(2,4);
	edge(2,3);
	int p=dfs(3,-1);
	if(p==0)
	cout<<"no cycle";
	else
	cout<<"cycle";
return 0;
}